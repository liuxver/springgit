<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有着特殊重要的作用
-->

<mapper namespace="com.crow.mapper.OrdersCustomMapper">

    <!-- 查询订单关联查询用户信息 -->

    <select id="findOrdersUser" resultType="com.crow.po.OrdersCustom">
        SELECT
        orders.*,
        USER.username,
        USER.sex,
        USER.address
        FROM
        orders,
        USER
        WHERE orders.user_id = user.id
    </select>






    <!-- 订单查询关联用户的resultMap 将整个查询的结果映射到com.crow.po.Orders中 -->
    <resultMap type="com.crow.po.Orders" id="OrdersUserResultMap">
        <!-- 配置映射的订单信息 -->
        <!-- 将查询结果中的订单信息映射到Orders对象中，在Orders中添加User属性，将关联查询出来的用户信息映射到orders对象中的user属性中> <!- - id：指定查询列中的唯一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id column：订单信息的唯一标识列 property：订单信息的唯一标识列所映射到Orders中哪个属性 -->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!-- 配置映射的关联的用户信息 -->
        <!-- association：用于映射关联查询单个对象的信息 property：要将关联查询的用户信息映射到Orders中哪个属性 -->
        <association property="user"  javaType="com.crow.po.User">
            <!-- id：关联查询用户的唯一标识 column：指定唯一标识用户信息的列 javaType：映射到user的哪个属性 -->
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>

        </association>
    </resultMap>

    <!-- 查询订单关联查询用户信息，使用resultmap -->
    <select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
        SELECT
        orders.*,
        USER.username,
        USER.sex,
        USER.address
        FROM
        orders,
        USER
        WHERE orders.user_id = user.id
    </select>


<!-- resultMap的定义也可以继承，通过extends语句实现，从而避免了书写重复代码。
并使用collection标签来配置映射的关联的订单明细信息，注意collection与association的区别：
collection把关联查询到的多条记录映射到pojo集合对象中，
而association是把关联查询到的单条记录映射到pojo对象中。
-->
    <resultMap id="OrdersAndDetailResultMap" type="com.crow.po.Orders" extends="OrdersUserResultMap">
        <!--订单明细信息 一个订单关联查询出了多条明细，要使用collection进行映射 collection：对关联查询到多条记录映射到集合对象中 property：将关联查询到多条记录映射到cn.itcast.mybatis.po.Orders哪个属性 ofType：指定映射到list集合属性中pojo的类型 -->
        <collection property="orderDetails" ofType="com.crow.po.OrderDetail">
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>
    </resultMap>

    <select id="findOrderAndDetailResultMap" resultMap="OrdersAndDetailResultMap">
        SELECT
        orders.*,
        USER.username,
        USER.sex,
        USER.address,
        orderdetail.id orderdetail_id,
        orderdetail.items_id,
        orderdetail.items_num,
        orderdetail.orders_id
        FROM
        orders,
        USER,
        orderdetail
        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
    </select>





    <!-- 查询用户及购买的商品 -->
    <resultMap type="com.crow.po.User" id="UserAndItemsResultMap">
        <!-- 用户信息 -->
        <id column="user_id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!-- 订单信息 一个用户对应多个订单，使用collection映射 -->
        <collection property="ordersList" ofType="com.crow.po.Orders">
            <id column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>

            <!-- 订单明细 一个订单包括 多个明细 collection里嵌套collection -->
            <collection property="orderDetails" ofType="com.crow.po.OrderDetail">
                <id column="orderdetail_id" property="id"/>
                <result column="items_id" property="itemsId"/>
                <result column="items_num" property="itemsNum"/>
                <result column="orders_id" property="ordersId"/>

                <!-- 商品信息 一个订单明细对应一个商品 -->
                <association property="items" javaType="com.crow.po.Items">
                    <id column="items_id" property="id"/>
                    <result column="items_name" property="name"/>
                    <result column="items_detail" property="detail"/>
                    <result column="items_price" property="price"/>
                </association>

            </collection>

        </collection>

    </resultMap>

    <!-- 查询用户及购买的商品信息，使用resultmap -->
    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
        SELECT
        orders.*,
        USER.username,
        USER.sex,
        USER.address,
        orderdetail.id orderdetail_id,
        orderdetail.items_id,
        orderdetail.items_num,
        orderdetail.orders_id,
        items.name items_name,
        items.detail items_detail,
        items.price items_price
        FROM
        orders,
        USER,
        orderdetail,
        items
        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id
    </select>


    <!--
    resultMap总结
resultType 作用：将查询结果按照sql列名pojo属性名一致性映射到pojo中。 应用场合：用于展示明细记录，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。
resultMap：使用association和collection完成一对一、一对多和多对多高级映射（对结果有特殊的映射要求）。
association： 作用：将关联查询信息映射到一个pojo对象中。 场合：为了方便查询关联信息，可以使用association将关联订单信息映射到用户对象的pojo属性中，比如：查询订单及关联用户信息。使用resultType无法将查询结果映射到pojo对象的pojo属性中。
collection 作用：将关联查询信息映射到一个list集合中。 场合：为了方便查询遍历关联信息，可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。
-->




</mapper>